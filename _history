{"entries":[{"timestamp":1748094126530,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"0\" y=\"0\""],[0,"></b"]],"start1":67,"start2":67,"length1":20,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"205\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"namespace gdcTCS34725 {\n\nbasic.forever(function () {\n\t\n})\n\n//% block=\"tcs34725 enable\"\nexport function tcs34725_enable() {\n    pins.i2cWriteNumber(0, 0, NumberFormat.Int8LE, false)\n    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);\n    DEV_Delay_ms(3);\n    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);\n    DEV_Delay_ms(3);\n}\n\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":374,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.15\""],[0,"\n   "]],"start1":139,"start2":139,"length1":65,"length2":8},{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":236,"start2":236,"length1":32,"length2":31}]}]},{"timestamp":1748094541785,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"{\n\t\n})\n\n"],[-1,"\n"],[0,"//% bloc"]],"start1":51,"start2":51,"length1":17,"length2":16}]}]},{"timestamp":1748095984085,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"})\n\n"],[-1,"led"],[0,"\n//%"]],"start1":55,"start2":55,"length1":11,"length2":8}]}]},{"timestamp":1748095985229,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n\nle"],[-1,"t TCS34725_address = 0x29\n\nenum TCS34752_reg {\n    TCS34725_CMD_BIT        =  0x80,\n    TCS34725_CMD_Read_Byte  =  0x00,\n    TCS34725_CMD_Read_Word  =  0x20,\n    TCS34725_CMD_Clear_INT  =  0x66,     // RGBC Interrupt flag clear\n    \n    TCS34725_ENABLE         =  0x00,     \n    TCS34725_ENABLE_AIEN    =  0x10,     // RGBC Interrupt Enable \n    TCS34725_ENABLE_WEN     =  0x08,     // Wait enable - Writing 1 activates the wait timer \n    TCS34725_ENABLE_AEN     =  0x02,     // RGBC Enable - Writing 1 actives the ADC, 0 disables it \n    TCS34725_ENABLE_PON     =  0x01,     // Power on - Writing 1 activates the internal oscillator, 0 disables it \n    \n    TCS34725_ATIME         =   0x01,     // Integration time \n    TCS34725_WTIME         =   0x03,     // Wait time (if TCS34725_ENABLE_WEN is asserted)\n    TCS34725_WTIME_2_4MS   =   0xFF,     // WLONG0 = 2.4ms   WLONG1 = 0.029s\n    TCS34725_WTIME_204MS   =   0xAB,     // WLONG0 = 204ms   WLONG1 = 2.45s \n    TCS34725_WTIME_614MS   =   0x00,     // WLONG0 = 614ms   WLONG1 = 7.4s  \n    \n    TCS34725_AILTL         =   0x04,     // Clear channel lower interrupt threshold\n    TCS34725_AILTH         =   0x05,\n    TCS34725_AIHTL         =   0x06,     // Clear channel upper interrupt threshold\n    TCS34725_AIHTH         =   0x07,\n    \n    TCS34725_PERS          =   0x0C,     // Persistence register - basic SW filtering mechanism for interrupts */\n    TCS34725_PERS_NONE     =   0x00,     // Every RGBC cycle generates an interrupt                                */\n    TCS34725_PERS_1_CYCLE  =   0x01,     // 1 clean channel value outside threshold range generates an interrupt   */\n    TCS34725_PERS_2_CYCLE  =   0x02,     // 2 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_3_CYCLE  =   0x03,     // 3 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_5_CYCLE  =   0x04,     // 5 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_10_CYCLE =   0x05,     // 10 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_15_CYCLE =   0x06,     // 15 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_20_CYCLE =   0x07,     // 20 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_25_CYCLE =   0x08,     // 25 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_30_CYCLE =   0x09,     // 30 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_35_CYCLE =   0x0a,     // 35 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_40_CYCLE =   0x0b,     // 40 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_45_CYCLE =   0x0c,     // 45 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_50_CYCLE =   0x0d,     // 50 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_55_CYCLE =   0x0e,     // 55 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_60_CYCLE =   0x0f,     // 60 clean channel values outside threshold range generates an interrupt */\n    \n    TCS34725_CONFIG         =  0x0D,\n    TCS34725_CONFIG_WLONG   =  0x02,     // Choose between short and long (12x) wait times via TCS34725_WTIME */\n    \n    TCS34725_CONTROL       =   0x0F,     // Set the gain level for the sensor */\n    TCS34725_ID            =   0x12,     // 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */\n    \n    TCS34725_STATUS        =   0x13,\n    TCS34725_STATUS_AINT   =   0x10,     // RGBC Clean channel interrupt */\n    TCS34725_STATUS_AVALID =   0x01,     // Indicates that the RGBC channels have completed an integration cycle */\n    \n    TCS34725_CDATAL        =   0x14,     // Clear channel data */\n    TCS34725_CDATAH        =   0x15,\n    TCS34725_RDATAL        =   0x16,     // Red channel data */\n    TCS34725_RDATAH        =   0x17,\n    TCS34725_GDATAL        =   0x18,     // Green channel data */\n    TCS34725_GDATAH        =   0x19,\n    TCS34725_BDATAL        =   0x1A,     // Blue channel data */\n    TCS34725_BDATAH        =   0x1B\n}\n"],[1,"d"],[0,"\n//%"]],"start1":57,"start2":57,"length1":4290,"length2":9},{"diffs":[[0,"ber("],[-1,"TCS34725_address"],[1,"0"],[0,", 0,"]],"start1":147,"start2":147,"length1":24,"length2":9}]}]},{"timestamp":1748096569336,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"0x1B\n}\n\n"],[-1,"\n"],[0,"//% bloc"]],"start1":4336,"start2":4336,"length1":17,"length2":16}]}]},{"timestamp":1748098359821,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"    /**\n     * set ds1307's reg\n     */\n    function setReg(reg: number, dat: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = dat;\n        pins.i2cWriteBuffer(DS1307_I2C_ADDR, buf);\n    }"],[0,"\n//%"]],"start1":4340,"start2":4340,"length1":242,"length2":8}]}]},{"timestamp":1748098360484,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"CS34725_"],[-1,"ADDR"],[1,"address"],[0," = 0x29\n"]],"start1":64,"start2":64,"length1":20,"length2":23},{"diffs":[[0,"\n}\n\n"],[-1,"/**\n* Integration Time\n**/\nenum TCS34725IntegrationTime {\n    TCS34725_INTEGRATIONTIME_2_4MS = 0xFF,   /**<  2.4ms - 1 cycle    - Max Count: 1024  */\n    TCS34725_INTEGRATIONTIME_24MS = 0xF6,   /**<  24ms  - 10 cycles  - Max Count: 10240 */\n    TCS34725_INTEGRATIONTIME_50MS = 0xEB,   /**<  50ms  - 20 cycles  - Max Count: 20480 */\n    TCS34725_INTEGRATIONTIME_101MS = 0xD5,   /**<  101ms - 42 cycles  - Max Count: 43008 */\n    TCS34725_INTEGRATIONTIME_154MS = 0xC0,   /**<  154ms - 64 cycles  - Max Count: 65535 */\n    TCS34725_INTEGRATIONTIME_700MS = 0x00    /**<  700ms - 256 cycles - Max Count: 65535"],[1,"    /**\n     * set ds1307's reg\n    "],[0," */\n"],[-1,"}\n"],[0,"    "],[-1,"\n/**\n * set TCS34725 reg\n */\n"],[0,"func"]],"start1":4340,"start2":4340,"length1":651,"length2":52},{"diffs":[[0," void {\n    "],[1," "],[1,"   "],[0,"let buf = pi"]],"start1":4430,"start2":4430,"length1":24,"length2":28},{"diffs":[[0,"fer(2);\n    "],[1,"   "],[1," "],[0,"buf[0] = reg"]],"start1":4470,"start2":4470,"length1":24,"length2":28},{"diffs":[[0," = reg;\n    "],[1,"  "],[1,"  "],[0,"buf[1] = dat"]],"start1":4492,"start2":4492,"length1":24,"length2":28},{"diffs":[[0," = dat;\n    "],[1," "],[1,"   "],[0,"pins.i2cWrit"]],"start1":4514,"start2":4514,"length1":24,"length2":28},{"diffs":[[0,"fer("],[-1,"TCS34725_ADDR, buf);\n}\n\n/**\n * get ds1307's reg\n */\nfunction getReg(reg: number): number {\n    pins.i2cWriteNumber(TCS34725_ADDR, reg, NumberFormat.UInt8BE);\n    return pins.i2cReadNumber(TCS34725_ADDR, NumberFormat.UInt8BE);\n}\n\n//% block=\"tcs34725 enable\"\nexport function tcs34725_enable() {\n    setReg(TCS34752_reg.TCS34725_ENABLE, TCS34752_reg.TCS34725_ENABLE_PON);\n    control.waitMicros(3000)\n    setReg(TCS34752_reg.TCS34725_ENABLE, TCS34752_reg.TCS34725_ENABLE_PON | TCS34752_reg.TCS34725_ENABLE_AEN);\n    control.waitMicros(3000)\n}\n\n//% block=\"tcs34725 disable\"\nexport function TCS34725_Disable() {\n    /* Turn the device off to save power */\n    let reg = 0;\n    reg = getReg(TCS34752_reg.TCS34725_ENABLE);\n    setReg(TCS34752_reg.TCS34725_ENABLE, reg & ~(TCS34752_reg."],[1,"DS1307_I2C_ADDR, buf);\n    }\n//% block=\"tcs34725 enable\"\nexport function tcs34725_enable() {\n    pins.i2cWriteNumber(TCS34725_address, 0, NumberFormat.Int8LE, false)\n    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);\n    DEV_Delay_ms(3);\n    TCS34725_WriteByte(TCS34725_ENABLE, "],[0,"TCS3"]],"start1":4546,"start2":4546,"length1":786,"length2":297},{"diffs":[[0,"N | "],[-1,"TCS34752_reg."],[0,"TCS3"]],"start1":4857,"start2":4857,"length1":21,"length2":8},{"diffs":[[0,"AEN)"],[-1,")"],[0,";\n"],[-1,"}\n\n//% block=\"tcs34725 disable\"\n\n    void TCS34725_Set_Integration_Time(TCS34725IntegrationTime_t time)\n    {\n        /* Update the timing register */\n        TCS34725_WriteByte(TCS34725_ATIME, time);\n        IntegrationTime_t = time;\n    "],[1,"    DEV_Delay_ms(3);\n"],[0,"}\n\n}"]],"start1":4877,"start2":4877,"length1":250,"length2":31}]}]},{"timestamp":1748098950613,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"tionTime"],[1,"_t"],[0," time)\n "]],"start1":6053,"start2":6053,"length1":16,"length2":18}]}]},{"timestamp":1748099534729,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e\"\n\n    "],[-1,"export function"],[1,"void"],[0," TCS3472"]],"start1":5995,"start2":5995,"length1":31,"length2":20},{"diffs":[[0,"ime("],[-1,"time: "],[0,"TCS3"]],"start1":6034,"start2":6034,"length1":14,"length2":8},{"diffs":[[0,"tionTime"],[1," time"],[0,")\n    {\n"]],"start1":6053,"start2":6053,"length1":16,"length2":21},{"diffs":[[0,"        "],[-1,"setReg(TCS34752_reg."],[1,"TCS34725_WriteByte("],[0,"TCS34725"]],"start1":6115,"start2":6115,"length1":36,"length2":35},{"diffs":[[0,"tionTime"],[1,"_t"],[0," = time;"]],"start1":6180,"start2":6180,"length1":16,"length2":18}]}]},{"timestamp":1748099629171,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"35 */\n}\n"],[-1,"  \n"],[0,"    \n/**"]],"start1":4943,"start2":4943,"length1":19,"length2":16}]}]},{"timestamp":1748164339247,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"/\n}\n"],[1,"  "],[0,"\n    "],[-1,"IntegrationTime"],[0,"\n/**"]],"start1":4947,"start2":4947,"length1":28,"length2":15}]}]},{"timestamp":1748164340450,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"5 */\n}\n\n"],[-1,"let"],[1,"   "],[0," Integra"]],"start1":4944,"start2":4944,"length1":19,"length2":19},{"diffs":[[0,"Time"],[-1," = 0\n\n/**\n* Gain\n**/\nenum TCS34725Gain {\n        TCS34725_GAIN_1X = 0x00,   /**<  No gain  */\n        TCS34725_GAIN_4X = 0x01,   /**<  4x gain  */\n        TCS34725_GAIN_16X = 0x02,   /**<  16x gain */\n        TCS34725_GAIN_60X = 0x03    /**<  60x gain */\n}\n\nlet Gain = 0\n"],[0,"\n/**"]],"start1":4967,"start2":4967,"length1":279,"length2":8},{"diffs":[[0,"ion "],[-1,"tcs"],[1,"TCS"],[0,"34725_"],[-1,"d"],[1,"D"],[0,"isab"]],"start1":5728,"start2":5728,"length1":18,"length2":18},{"diffs":[[0," reg = 0"],[1,";"],[0,"\n    reg"]],"start1":5804,"start2":5804,"length1":16,"length2":17},{"diffs":[[0,"725 "],[-1,"set integration time $value\"\n"],[1,"disable\"\n\n    "],[0,"expo"]],"start1":6001,"start2":6001,"length1":37,"length2":22},{"diffs":[[0,"ion "],[-1,"tcs"],[1,"TCS"],[0,"34725_"],[-1,"set_i"],[1,"Set_I"],[0,"nteg"]],"start1":6031,"start2":6031,"length1":22,"length2":22},{"diffs":[[0,"gration_"],[-1,"t"],[1,"T"],[0,"ime(time"]],"start1":6052,"start2":6052,"length1":17,"length2":17},{"diffs":[[0,"onTime)\n"],[-1,"{\n"],[1,"    {\n  "],[0,"    "],[1,"  "],[0,"/* Updat"]],"start1":6088,"start2":6088,"length1":22,"length2":30},{"diffs":[[0,"register */\n"],[1,"    "],[0,"    setReg(T"]],"start1":6131,"start2":6131,"length1":24,"length2":28},{"diffs":[[0,"    "],[-1,"IntegrationTime = time;\n}\n\n//% block=\"tcs34725 set gain $value\"\nexport function tcs34725_set_gain(gain: TCS34725Gain)\n{\n    setReg(TCS34752_reg.TCS34725_CONTROL, gain);\n    Gain = gain;\n}\n\n//% block=\"tcs34725 init\"\nexport function tcs34725_init()\n    {\n        let ID = 0;\n        ID = getReg(TCS34752_reg.TCS34725_ID);\n        if (ID != 0x44 && ID != 0x4D) {\n            return 1;\n        }\n\n        //Set the integration time and gain\n        TCS34725_Set_Integration_Time(TCS34725IntegrationTime.TCS34725_INTEGRATIONTIME_154MS);\n        TCS34725_Set_Gain(TCS34725Gain.TCS34725_GAIN_60X);\n\n        TCS34725_Enable();\n        TCS34725_Interrupt_Enable();\n        //Set the LCD brightness\n        TCS34725_SetLight(60);\n\n        return 0;\n    }"],[1,"    IntegrationTime = time;\n    }\n"],[0,"\n}\n"]],"start1":6194,"start2":6194,"length1":751,"length2":41}]}]},{"timestamp":1748164939893,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," = 0"],[-1,"\n    \nlet tcs34725RGB = {\n        red: 0,\n        green: 0,\n        blue: 0\n};"],[0,"\n\n/*"]],"start1":5237,"start2":5237,"length1":86,"length2":8},{"diffs":[[0,"ain;\n}\n\n"],[-1,"\n"],[0,"//% bloc"]],"start1":6652,"start2":6652,"length1":17,"length2":16},{"diffs":[[0,"725 "],[-1,"get RGB data"],[1,"init"],[0,"\"\nex"]],"start1":6676,"start2":6676,"length1":20,"length2":12},{"diffs":[[0,"725_"],[-1,"get_rgb_data()\n{\n    tcs34725RGB temp;\n    temp.C = TCS34725_ReadWord(TCS34725_CDATAL | TCS34725_CMD_Read_Word);\n    temp.R = TCS34725_ReadWord(TCS34725_RDATAL | TCS34725_CMD_Read_Word);\n    temp.G = TCS34725_ReadWord(TCS34725_GDATAL | TCS34725_CMD_Read_Word);\n    temp.B = TCS34725_ReadWord(TCS34725_BDATAL | TCS34725_CMD_Read_Word);\n    switch (IntegrationTime_t) {\n        case TCS34725_INTEGRATIONTIME_2_4MS:\n            DEV_Delay_ms(3);\n            break;\n        case TCS34725_INTEGRATIONTIME_24MS:\n            DEV_Delay_ms(24);\n            break;\n        case TCS34725_INTEGRATIONTIME_50MS:\n            DEV_Delay_ms(50);\n            break;\n        case TCS34725_INTEGRATIONTIME_101MS:\n            DEV_Delay_ms(101);\n            break;\n        case TCS34725_INTEGRATIONTIME_154MS:\n            DEV_Delay_ms(154);\n            break;\n        case TCS34725_INTEGRATIONTIME_700MS:\n            DEV_Delay_ms(700);\n            break;\n    }\n    return temp;\n}\n\n//% block=\"tcs34725 init\"\nexport function tcs34725_init()\n{\n    let ID = 0;\n"],[1,"init()\n    {\n        let ID = 0;\n    "],[0,"    "]],"start1":6707,"start2":6707,"length1":1042,"length2":45},{"diffs":[[0,"25_ID);\n"],[1,"    "],[0,"    if ("]],"start1":6783,"start2":6783,"length1":16,"length2":20},{"diffs":[[0,") {\n        "],[1,"    "],[0,"return 1;\n  "]],"start1":6827,"start2":6827,"length1":24,"length2":28},{"diffs":[[0,"    "],[-1,"}\n\n"],[1,"    }\n\n   "],[0,"    "],[1," "],[0,"//Se"]],"start1":6853,"start2":6853,"length1":15,"length2":23},{"diffs":[[0,"ain\n    "],[-1,"tcs"],[1,"    TCS"],[0,"34725_"],[-1,"set_i"],[1,"Set_I"],[0,"ntegrati"]],"start1":6904,"start2":6904,"length1":30,"length2":34},{"diffs":[[0,"Integration_"],[-1,"t"],[1,"T"],[0,"ime(TCS34725"]],"start1":6929,"start2":6929,"length1":25,"length2":25},{"diffs":[[0,"S);\n    "],[-1,"tcs"],[1,"    TCS"],[0,"34725_"],[-1,"set_g"],[1,"Set_G"],[0,"ain(TCS3"]],"start1":6999,"start2":6999,"length1":30,"length2":34},{"diffs":[[0,"X);\n"],[1,"\n  "],[0,"    "],[-1,"tcs"],[1,"  TCS"],[0,"34725_"],[-1,"enable();\n    \n"],[1,"Enable();\n        TCS34725_Interrupt_Enable();\n        //Set the LCD brightness\n        TCS34725_SetLight(60);\n\n    "],[0,"    "]],"start1":7058,"start2":7058,"length1":36,"length2":142},{"diffs":[[0,"turn 0;\n"],[1,"    "],[0,"}\n}\n"]],"start1":7202,"start2":7202,"length1":12,"length2":16}]}]},{"timestamp":1748165343007,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"/**\n  * get ds1307's reg Word\n  */\nfunction getWord(reg: number): number {\n    pins.i2cWriteNumber(TCS34725_ADDR, reg, NumberFormat.UInt8BE);\n    return pins.i2cReadNumber(TCS34725_ADDR, NumberFormat.UInt16BE);\n}\n\n"],[0,"//% "]],"start1":5720,"start2":5720,"length1":222,"length2":8},{"diffs":[[0,"\n   "],[-1," let temp ="],[0," tcs"]],"start1":6814,"start2":6814,"length1":19,"length2":8},{"diffs":[[0,"34725RGB"],[1," temp;"],[0,"\n    tem"]],"start1":6822,"start2":6822,"length1":16,"length2":22},{"diffs":[[0,"emp.C = "],[-1,"getWord(TCS34752_reg."],[1,"TCS34725_ReadWord("],[0,"TCS34725"]],"start1":6842,"start2":6842,"length1":37,"length2":34},{"diffs":[[0,"emp.R = "],[-1,"getWord(TCS34752_reg."],[1,"TCS34725_ReadWord("],[0,"TCS34725"]],"start1":6916,"start2":6916,"length1":37,"length2":34},{"diffs":[[0,"emp.G = "],[-1,"getWord(TCS34752_reg."],[1,"TCS34725_ReadWord("],[0,"TCS34725"]],"start1":6990,"start2":6990,"length1":37,"length2":34},{"diffs":[[0,"B = "],[-1,"getWord(TCS34752_reg."],[1,"TCS34725_ReadWord("],[0,"TCS3"]],"start1":7068,"start2":7068,"length1":29,"length2":26}]}]},{"timestamp":1748165848991,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"0] = reg"],[-1," "],[0,";\n    bu"]],"start1":5443,"start2":5443,"length1":17,"length2":16}]}]},{"timestamp":1748175445429,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"0] = reg"],[-1," |"],[0," ;\n    b"]],"start1":5443,"start2":5443,"length1":18,"length2":16}]}]},{"timestamp":1748175446645,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"g | "],[-1,"TCS34752_reg.TCS34725_CMD_BIT"],[0,";\n"],[1,""],[0,"    "]],"start1":5450,"start2":5450,"length1":39,"length2":10},{"diffs":[[0," reg"],[-1," | TCS34752_reg.TCS34725_CMD_BIT"],[0,", Nu"]],"start1":5627,"start2":5627,"length1":40,"length2":8},{"diffs":[[0,"r {\n"],[-1,"    let buf = pins.createBuffer(2);\n    let val = 0;\n\n"],[0,"    "]],"start1":5798,"start2":5798,"length1":62,"length2":8},{"diffs":[[0," reg"],[-1," | TCS34752_reg.TCS34725_CMD_BIT"],[0,", Nu"]],"start1":5840,"start2":5840,"length1":40,"length2":8},{"diffs":[[0,"E);\n    "],[-1,"buf ="],[1,"return"],[0," pins.i2"]],"start1":5865,"start2":5865,"length1":21,"length2":22},{"diffs":[[0,".i2cRead"],[-1,"Buff"],[1,"Numb"],[0,"er(TCS34"]],"start1":5884,"start2":5884,"length1":20,"length2":20},{"diffs":[[0,"DR, "],[-1,"2)\n    val = buf[0]<<8 | buf[1];\n    return val"],[1,"NumberFormat.UInt16BE);"],[0,"\n}\n\n"]],"start1":5910,"start2":5910,"length1":55,"length2":31},{"diffs":[[0,"    let "],[-1,"rgb"],[1,"temp"],[0," = tcs34"]],"start1":7032,"start2":7032,"length1":19,"length2":20},{"diffs":[[0,"RGB\n    "],[-1,"let "],[1,"temp."],[0,"C = getW"]],"start1":7055,"start2":7055,"length1":20,"length2":21},{"diffs":[[0,"5_CDATAL"],[1," | TCS34725_CMD_Read_Word"],[0,");\n    "],[-1,"let "],[1,"temp."],[0,"R = getW"]],"start1":7100,"start2":7100,"length1":27,"length2":53},{"diffs":[[0,"5_RDATAL"],[1," | TCS34725_CMD_Read_Word"],[0,");\n    "],[-1,"let "],[1,"temp."],[0,"G = getW"]],"start1":7177,"start2":7177,"length1":27,"length2":53},{"diffs":[[0,"ATAL"],[1," | TCS34725_CMD_Read_Word"],[0,");\n    "],[-1,"let "],[1,"temp."],[0,"B = "]],"start1":7258,"start2":7258,"length1":19,"length2":45},{"diffs":[[0,"ATAL"],[-1,");\n\n    if(C == 0) {\n        "],[1," | TCS34725_CMD_Read_Word);\n    switch (IntegrationTime_t) {\n        case TCS34725_INTEGRATIONTIME_2_4MS:\n            DEV_Delay_ms(3);\n            break;\n        case TCS34725_INTEGRATIONTIME_24MS:\n            DEV_Delay_ms(24);\n            break;\n        case TCS34725_INTEGRATIONTIME_50MS:\n            DEV_Delay_ms(50);\n            break;\n        case TCS34725_INTEGRATIONTIME_101MS:\n            DEV_Delay_ms(101);\n            break;\n        case TCS34725_INTEGRATIONTIME_154MS:\n            DEV_Delay_ms(154);\n            break;\n        case TCS34725_INTEGRATIONTIME_700MS:\n            DEV_Delay_ms(700);\n            break;"],[0,"\n   "]],"start1":7335,"start2":7335,"length1":37,"length2":632}]}]},{"timestamp":1748176046369,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"        rgb.red = 0;\n        rgb.green = 0;\n        rgb.blue = 0;\n    }\n    else {\n"],[0,"    "]],"start1":7446,"start2":7446,"length1":91,"length2":8}]}]},{"timestamp":1748176067259,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"_CDATAL)"],[-1," "],[0,";\n    le"]],"start1":7269,"start2":7269,"length1":17,"length2":16}]}]},{"timestamp":1749299939974,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"4725_CDATAL)"],[1," "],[0,";\n    let R "]],"start1":7265,"start2":7265,"length1":24,"length2":25}]}]},{"timestamp":1749299948066,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"cBf/HRx08$0sMc9`6Asx\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"54#Q_ol{Nn7g|_z8+wZt\""],[0," x=\""]],"start1":149,"start2":149,"length1":34,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"rgb.red = R;\n        rgb.green = G;\n        rgb.blue = B;"],[0,"\n   "]],"start1":7537,"start2":7537,"length1":65,"length2":8},{"diffs":[[0," return "],[-1,"rgb"],[1,"temp"],[0,";\n}\n\n//%"]],"start1":7551,"start2":7551,"length1":19,"length2":20}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":288,"start2":288,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1748094126529,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"gdc-tcs34725\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1748098359821,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"namespace gdcTCS34725 {\n\nbasic.forever(function () {\n\t\n})\n\nlet TCS34725_address = 0x29\n\nenum TCS34752_reg {\n    TCS34725_CMD_BIT        =  0x80,\n    TCS34725_CMD_Read_Byte  =  0x00,\n    TCS34725_CMD_Read_Word  =  0x20,\n    TCS34725_CMD_Clear_INT  =  0x66,     // RGBC Interrupt flag clear\n    \n    TCS34725_ENABLE         =  0x00,     \n    TCS34725_ENABLE_AIEN    =  0x10,     // RGBC Interrupt Enable \n    TCS34725_ENABLE_WEN     =  0x08,     // Wait enable - Writing 1 activates the wait timer \n    TCS34725_ENABLE_AEN     =  0x02,     // RGBC Enable - Writing 1 actives the ADC, 0 disables it \n    TCS34725_ENABLE_PON     =  0x01,     // Power on - Writing 1 activates the internal oscillator, 0 disables it \n    \n    TCS34725_ATIME         =   0x01,     // Integration time \n    TCS34725_WTIME         =   0x03,     // Wait time (if TCS34725_ENABLE_WEN is asserted)\n    TCS34725_WTIME_2_4MS   =   0xFF,     // WLONG0 = 2.4ms   WLONG1 = 0.029s\n    TCS34725_WTIME_204MS   =   0xAB,     // WLONG0 = 204ms   WLONG1 = 2.45s \n    TCS34725_WTIME_614MS   =   0x00,     // WLONG0 = 614ms   WLONG1 = 7.4s  \n    \n    TCS34725_AILTL         =   0x04,     // Clear channel lower interrupt threshold\n    TCS34725_AILTH         =   0x05,\n    TCS34725_AIHTL         =   0x06,     // Clear channel upper interrupt threshold\n    TCS34725_AIHTH         =   0x07,\n    \n    TCS34725_PERS          =   0x0C,     // Persistence register - basic SW filtering mechanism for interrupts */\n    TCS34725_PERS_NONE     =   0x00,     // Every RGBC cycle generates an interrupt                                */\n    TCS34725_PERS_1_CYCLE  =   0x01,     // 1 clean channel value outside threshold range generates an interrupt   */\n    TCS34725_PERS_2_CYCLE  =   0x02,     // 2 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_3_CYCLE  =   0x03,     // 3 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_5_CYCLE  =   0x04,     // 5 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_10_CYCLE =   0x05,     // 10 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_15_CYCLE =   0x06,     // 15 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_20_CYCLE =   0x07,     // 20 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_25_CYCLE =   0x08,     // 25 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_30_CYCLE =   0x09,     // 30 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_35_CYCLE =   0x0a,     // 35 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_40_CYCLE =   0x0b,     // 40 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_45_CYCLE =   0x0c,     // 45 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_50_CYCLE =   0x0d,     // 50 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_55_CYCLE =   0x0e,     // 55 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_60_CYCLE =   0x0f,     // 60 clean channel values outside threshold range generates an interrupt */\n    \n    TCS34725_CONFIG         =  0x0D,\n    TCS34725_CONFIG_WLONG   =  0x02,     // Choose between short and long (12x) wait times via TCS34725_WTIME */\n    \n    TCS34725_CONTROL       =   0x0F,     // Set the gain level for the sensor */\n    TCS34725_ID            =   0x12,     // 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */\n    \n    TCS34725_STATUS        =   0x13,\n    TCS34725_STATUS_AINT   =   0x10,     // RGBC Clean channel interrupt */\n    TCS34725_STATUS_AVALID =   0x01,     // Indicates that the RGBC channels have completed an integration cycle */\n    \n    TCS34725_CDATAL        =   0x14,     // Clear channel data */\n    TCS34725_CDATAH        =   0x15,\n    TCS34725_RDATAL        =   0x16,     // Red channel data */\n    TCS34725_RDATAH        =   0x17,\n    TCS34725_GDATAL        =   0x18,     // Green channel data */\n    TCS34725_GDATAH        =   0x19,\n    TCS34725_BDATAL        =   0x1A,     // Blue channel data */\n    TCS34725_BDATAH        =   0x1B\n}\n\n//% block=\"tcs34725 enable\"\nexport function tcs34725_enable() {\n    pins.i2cWriteNumber(TCS34725_address, 0, NumberFormat.Int8LE, false)\n    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);\n    DEV_Delay_ms(3);\n    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);\n    DEV_Delay_ms(3);\n}\n\n}\n","README.md":"","pxt.json":"{\n    \"name\": \"gdc-tcs34725\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.15\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1748175445429,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"namespace gdcTCS34725 {\n\nbasic.forever(function () {\n\t\n})\n\nlet TCS34725_ADDR = 0x29\n\nenum TCS34752_reg {\n    TCS34725_CMD_BIT        =  0x80,\n    TCS34725_CMD_Read_Byte  =  0x00,\n    TCS34725_CMD_Read_Word  =  0x20,\n    TCS34725_CMD_Clear_INT  =  0x66,     // RGBC Interrupt flag clear\n    \n    TCS34725_ENABLE         =  0x00,     \n    TCS34725_ENABLE_AIEN    =  0x10,     // RGBC Interrupt Enable \n    TCS34725_ENABLE_WEN     =  0x08,     // Wait enable - Writing 1 activates the wait timer \n    TCS34725_ENABLE_AEN     =  0x02,     // RGBC Enable - Writing 1 actives the ADC, 0 disables it \n    TCS34725_ENABLE_PON     =  0x01,     // Power on - Writing 1 activates the internal oscillator, 0 disables it \n    \n    TCS34725_ATIME         =   0x01,     // Integration time \n    TCS34725_WTIME         =   0x03,     // Wait time (if TCS34725_ENABLE_WEN is asserted)\n    TCS34725_WTIME_2_4MS   =   0xFF,     // WLONG0 = 2.4ms   WLONG1 = 0.029s\n    TCS34725_WTIME_204MS   =   0xAB,     // WLONG0 = 204ms   WLONG1 = 2.45s \n    TCS34725_WTIME_614MS   =   0x00,     // WLONG0 = 614ms   WLONG1 = 7.4s  \n    \n    TCS34725_AILTL         =   0x04,     // Clear channel lower interrupt threshold\n    TCS34725_AILTH         =   0x05,\n    TCS34725_AIHTL         =   0x06,     // Clear channel upper interrupt threshold\n    TCS34725_AIHTH         =   0x07,\n    \n    TCS34725_PERS          =   0x0C,     // Persistence register - basic SW filtering mechanism for interrupts */\n    TCS34725_PERS_NONE     =   0x00,     // Every RGBC cycle generates an interrupt                                */\n    TCS34725_PERS_1_CYCLE  =   0x01,     // 1 clean channel value outside threshold range generates an interrupt   */\n    TCS34725_PERS_2_CYCLE  =   0x02,     // 2 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_3_CYCLE  =   0x03,     // 3 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_5_CYCLE  =   0x04,     // 5 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_10_CYCLE =   0x05,     // 10 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_15_CYCLE =   0x06,     // 15 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_20_CYCLE =   0x07,     // 20 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_25_CYCLE =   0x08,     // 25 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_30_CYCLE =   0x09,     // 30 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_35_CYCLE =   0x0a,     // 35 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_40_CYCLE =   0x0b,     // 40 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_45_CYCLE =   0x0c,     // 45 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_50_CYCLE =   0x0d,     // 50 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_55_CYCLE =   0x0e,     // 55 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_60_CYCLE =   0x0f,     // 60 clean channel values outside threshold range generates an interrupt */\n    \n    TCS34725_CONFIG         =  0x0D,\n    TCS34725_CONFIG_WLONG   =  0x02,     // Choose between short and long (12x) wait times via TCS34725_WTIME */\n    \n    TCS34725_CONTROL       =   0x0F,     // Set the gain level for the sensor */\n    TCS34725_ID            =   0x12,     // 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */\n    \n    TCS34725_STATUS        =   0x13,\n    TCS34725_STATUS_AINT   =   0x10,     // RGBC Clean channel interrupt */\n    TCS34725_STATUS_AVALID =   0x01,     // Indicates that the RGBC channels have completed an integration cycle */\n    \n    TCS34725_CDATAL        =   0x14,     // Clear channel data */\n    TCS34725_CDATAH        =   0x15,\n    TCS34725_RDATAL        =   0x16,     // Red channel data */\n    TCS34725_RDATAH        =   0x17,\n    TCS34725_GDATAL        =   0x18,     // Green channel data */\n    TCS34725_GDATAH        =   0x19,\n    TCS34725_BDATAL        =   0x1A,     // Blue channel data */\n    TCS34725_BDATAH        =   0x1B\n}\n\n/**\n* Integration Time\n**/\nenum TCS34725IntegrationTime {\n    TCS34725_INTEGRATIONTIME_2_4MS = 0xFF,   /**<  2.4ms - 1 cycle    - Max Count: 1024  */\n    TCS34725_INTEGRATIONTIME_24MS = 0xF6,   /**<  24ms  - 10 cycles  - Max Count: 10240 */\n    TCS34725_INTEGRATIONTIME_50MS = 0xEB,   /**<  50ms  - 20 cycles  - Max Count: 20480 */\n    TCS34725_INTEGRATIONTIME_101MS = 0xD5,   /**<  101ms - 42 cycles  - Max Count: 43008 */\n    TCS34725_INTEGRATIONTIME_154MS = 0xC0,   /**<  154ms - 64 cycles  - Max Count: 65535 */\n    TCS34725_INTEGRATIONTIME_700MS = 0x00    /**<  700ms - 256 cycles - Max Count: 65535 */\n}\n\nlet IntegrationTime = 0\n\n/**\n* Gain\n**/\nenum TCS34725Gain {\n        TCS34725_GAIN_1X = 0x00,   /**<  No gain  */\n        TCS34725_GAIN_4X = 0x01,   /**<  4x gain  */\n        TCS34725_GAIN_16X = 0x02,   /**<  16x gain */\n        TCS34725_GAIN_60X = 0x03    /**<  60x gain */\n}\n\nlet Gain = 0\n    \nlet tcs34725RGB = {\n        red: 0,\n        green: 0,\n        blue: 0\n};\n\n/**\n * set TCS34725 reg\n */\nfunction setReg(reg: number, dat: number): void {\n    let buf = pins.createBuffer(2);\n    buf[0] = reg;\n    buf[1] = dat;\n    pins.i2cWriteBuffer(TCS34725_ADDR, buf);\n}\n\n/**\n * get ds1307's reg\n */\nfunction getReg(reg: number): number {\n    pins.i2cWriteNumber(TCS34725_ADDR, reg, NumberFormat.UInt8BE);\n    return pins.i2cReadNumber(TCS34725_ADDR, NumberFormat.UInt8BE);\n}\n\n/**\n  * get ds1307's reg Word\n  */\nfunction getWord(reg: number): number {\n    pins.i2cWriteNumber(TCS34725_ADDR, reg, NumberFormat.UInt8BE);\n    return pins.i2cReadNumber(TCS34725_ADDR, NumberFormat.UInt16BE);\n}\n\n//% block=\"tcs34725 enable\"\nexport function tcs34725_enable() {\n    setReg(TCS34752_reg.TCS34725_ENABLE, TCS34752_reg.TCS34725_ENABLE_PON);\n    control.waitMicros(3000)\n    setReg(TCS34752_reg.TCS34725_ENABLE, TCS34752_reg.TCS34725_ENABLE_PON | TCS34752_reg.TCS34725_ENABLE_AEN);\n    control.waitMicros(3000)\n}\n\n//% block=\"tcs34725 disable\"\nexport function tcs34725_disable() {\n    /* Turn the device off to save power */\n    let reg = 0\n    reg = getReg(TCS34752_reg.TCS34725_ENABLE);\n    setReg(TCS34752_reg.TCS34725_ENABLE, reg & ~(TCS34752_reg.TCS34725_ENABLE_PON | TCS34752_reg.TCS34725_ENABLE_AEN));\n}\n\n//% block=\"tcs34725 set integration time $value\"\nexport function tcs34725_set_integration_time(time: TCS34725IntegrationTime)\n{\n    /* Update the timing register */\n    setReg(TCS34752_reg.TCS34725_ATIME, time);\n    IntegrationTime = time;\n}\n\n//% block=\"tcs34725 set gain $value\"\nexport function tcs34725_set_gain(gain: TCS34725Gain)\n{\n    setReg(TCS34752_reg.TCS34725_CONTROL, gain);\n    Gain = gain;\n}\n\n\n//% block=\"tcs34725 get RGB data\"\nexport function tcs34725_get_rgb_data()\n{\n    let temp = tcs34725RGB\n    temp.C = getWord(TCS34752_reg.TCS34725_CDATAL | TCS34725_CMD_Read_Word);\n    temp.R = getWord(TCS34752_reg.TCS34725_RDATAL | TCS34725_CMD_Read_Word);\n    temp.G = getWord(TCS34752_reg.TCS34725_GDATAL | TCS34725_CMD_Read_Word);\n    temp.B = getWord(TCS34752_reg.TCS34725_BDATAL | TCS34725_CMD_Read_Word);\n    switch (IntegrationTime_t) {\n        case TCS34725_INTEGRATIONTIME_2_4MS:\n            DEV_Delay_ms(3);\n            break;\n        case TCS34725_INTEGRATIONTIME_24MS:\n            DEV_Delay_ms(24);\n            break;\n        case TCS34725_INTEGRATIONTIME_50MS:\n            DEV_Delay_ms(50);\n            break;\n        case TCS34725_INTEGRATIONTIME_101MS:\n            DEV_Delay_ms(101);\n            break;\n        case TCS34725_INTEGRATIONTIME_154MS:\n            DEV_Delay_ms(154);\n            break;\n        case TCS34725_INTEGRATIONTIME_700MS:\n            DEV_Delay_ms(700);\n            break;\n    }\n    return temp;\n}\n\n//% block=\"tcs34725 init\"\nexport function tcs34725_init()\n{\n    let ID = 0;\n    ID = getReg(TCS34752_reg.TCS34725_ID);\n    if (ID != 0x44 && ID != 0x4D) {\n        return 1;\n    }\n\n    //Set the integration time and gain\n    tcs34725_set_integration_time(TCS34725IntegrationTime.TCS34725_INTEGRATIONTIME_154MS);\n    tcs34725_set_gain(TCS34725Gain.TCS34725_GAIN_60X);\n    tcs34725_enable();\n    \n    return 0;\n}\n}\n","README.md":"","pxt.json":"{\n    \"name\": \"gdc-tcs34725\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.15\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1749299939974,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"namespace gdcTCS34725 {\n\nbasic.forever(function () {\n\t\n})\n\nlet TCS34725_ADDR = 0x29\n\nenum TCS34752_reg {\n    TCS34725_CMD_BIT        =  0x80,\n    TCS34725_CMD_Read_Byte  =  0x00,\n    TCS34725_CMD_Read_Word  =  0x20,\n    TCS34725_CMD_Clear_INT  =  0x66,     // RGBC Interrupt flag clear\n    \n    TCS34725_ENABLE         =  0x00,     \n    TCS34725_ENABLE_AIEN    =  0x10,     // RGBC Interrupt Enable \n    TCS34725_ENABLE_WEN     =  0x08,     // Wait enable - Writing 1 activates the wait timer \n    TCS34725_ENABLE_AEN     =  0x02,     // RGBC Enable - Writing 1 actives the ADC, 0 disables it \n    TCS34725_ENABLE_PON     =  0x01,     // Power on - Writing 1 activates the internal oscillator, 0 disables it \n    \n    TCS34725_ATIME         =   0x01,     // Integration time \n    TCS34725_WTIME         =   0x03,     // Wait time (if TCS34725_ENABLE_WEN is asserted)\n    TCS34725_WTIME_2_4MS   =   0xFF,     // WLONG0 = 2.4ms   WLONG1 = 0.029s\n    TCS34725_WTIME_204MS   =   0xAB,     // WLONG0 = 204ms   WLONG1 = 2.45s \n    TCS34725_WTIME_614MS   =   0x00,     // WLONG0 = 614ms   WLONG1 = 7.4s  \n    \n    TCS34725_AILTL         =   0x04,     // Clear channel lower interrupt threshold\n    TCS34725_AILTH         =   0x05,\n    TCS34725_AIHTL         =   0x06,     // Clear channel upper interrupt threshold\n    TCS34725_AIHTH         =   0x07,\n    \n    TCS34725_PERS          =   0x0C,     // Persistence register - basic SW filtering mechanism for interrupts */\n    TCS34725_PERS_NONE     =   0x00,     // Every RGBC cycle generates an interrupt                                */\n    TCS34725_PERS_1_CYCLE  =   0x01,     // 1 clean channel value outside threshold range generates an interrupt   */\n    TCS34725_PERS_2_CYCLE  =   0x02,     // 2 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_3_CYCLE  =   0x03,     // 3 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_5_CYCLE  =   0x04,     // 5 clean channel values outside threshold range generates an interrupt  */\n    TCS34725_PERS_10_CYCLE =   0x05,     // 10 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_15_CYCLE =   0x06,     // 15 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_20_CYCLE =   0x07,     // 20 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_25_CYCLE =   0x08,     // 25 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_30_CYCLE =   0x09,     // 30 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_35_CYCLE =   0x0a,     // 35 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_40_CYCLE =   0x0b,     // 40 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_45_CYCLE =   0x0c,     // 45 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_50_CYCLE =   0x0d,     // 50 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_55_CYCLE =   0x0e,     // 55 clean channel values outside threshold range generates an interrupt */\n    TCS34725_PERS_60_CYCLE =   0x0f,     // 60 clean channel values outside threshold range generates an interrupt */\n    \n    TCS34725_CONFIG         =  0x0D,\n    TCS34725_CONFIG_WLONG   =  0x02,     // Choose between short and long (12x) wait times via TCS34725_WTIME */\n    \n    TCS34725_CONTROL       =   0x0F,     // Set the gain level for the sensor */\n    TCS34725_ID            =   0x12,     // 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */\n    \n    TCS34725_STATUS        =   0x13,\n    TCS34725_STATUS_AINT   =   0x10,     // RGBC Clean channel interrupt */\n    TCS34725_STATUS_AVALID =   0x01,     // Indicates that the RGBC channels have completed an integration cycle */\n    \n    TCS34725_CDATAL        =   0x14,     // Clear channel data */\n    TCS34725_CDATAH        =   0x15,\n    TCS34725_RDATAL        =   0x16,     // Red channel data */\n    TCS34725_RDATAH        =   0x17,\n    TCS34725_GDATAL        =   0x18,     // Green channel data */\n    TCS34725_GDATAH        =   0x19,\n    TCS34725_BDATAL        =   0x1A,     // Blue channel data */\n    TCS34725_BDATAH        =   0x1B\n}\n\n/**\n* Integration Time\n**/\nenum TCS34725IntegrationTime {\n    TCS34725_INTEGRATIONTIME_2_4MS = 0xFF,   /**<  2.4ms - 1 cycle    - Max Count: 1024  */\n    TCS34725_INTEGRATIONTIME_24MS = 0xF6,   /**<  24ms  - 10 cycles  - Max Count: 10240 */\n    TCS34725_INTEGRATIONTIME_50MS = 0xEB,   /**<  50ms  - 20 cycles  - Max Count: 20480 */\n    TCS34725_INTEGRATIONTIME_101MS = 0xD5,   /**<  101ms - 42 cycles  - Max Count: 43008 */\n    TCS34725_INTEGRATIONTIME_154MS = 0xC0,   /**<  154ms - 64 cycles  - Max Count: 65535 */\n    TCS34725_INTEGRATIONTIME_700MS = 0x00    /**<  700ms - 256 cycles - Max Count: 65535 */\n}\n\nlet IntegrationTime = 0\n\n/**\n* Gain\n**/\nenum TCS34725Gain {\n        TCS34725_GAIN_1X = 0x00,   /**<  No gain  */\n        TCS34725_GAIN_4X = 0x01,   /**<  4x gain  */\n        TCS34725_GAIN_16X = 0x02,   /**<  16x gain */\n        TCS34725_GAIN_60X = 0x03    /**<  60x gain */\n}\n\nlet Gain = 0\n    \nlet tcs34725RGB = {\n        red: 0,\n        green: 0,\n        blue: 0\n};\n\n/**\n * set TCS34725 reg\n */\nfunction setReg(reg: number, dat: number): void {\n    let buf = pins.createBuffer(2);\n    buf[0] = reg | TCS34752_reg.TCS34725_CMD_BIT;\n    buf[1] = dat;\n    pins.i2cWriteBuffer(TCS34725_ADDR, buf);\n}\n\n/**\n * get ds1307's reg\n */\nfunction getReg(reg: number): number {\n    pins.i2cWriteNumber(TCS34725_ADDR, reg | TCS34752_reg.TCS34725_CMD_BIT, NumberFormat.UInt8BE);\n    return pins.i2cReadNumber(TCS34725_ADDR, NumberFormat.UInt8BE);\n}\n\n/**\n  * get ds1307's reg Word\n  */\nfunction getWord(reg: number): number {\n    let buf = pins.createBuffer(2);\n    let val = 0;\n\n    pins.i2cWriteNumber(TCS34725_ADDR, reg | TCS34752_reg.TCS34725_CMD_BIT, NumberFormat.UInt8BE);\n    buf = pins.i2cReadBuffer(TCS34725_ADDR, 2)\n    val = buf[0]<<8 | buf[1];\n    return val\n}\n\n//% block=\"tcs34725 enable\"\nexport function tcs34725_enable() {\n    setReg(TCS34752_reg.TCS34725_ENABLE, TCS34752_reg.TCS34725_ENABLE_PON);\n    control.waitMicros(3000)\n    setReg(TCS34752_reg.TCS34725_ENABLE, TCS34752_reg.TCS34725_ENABLE_PON | TCS34752_reg.TCS34725_ENABLE_AEN);\n    control.waitMicros(3000)\n}\n\n//% block=\"tcs34725 disable\"\nexport function tcs34725_disable() {\n    /* Turn the device off to save power */\n    let reg = 0\n    reg = getReg(TCS34752_reg.TCS34725_ENABLE);\n    setReg(TCS34752_reg.TCS34725_ENABLE, reg & ~(TCS34752_reg.TCS34725_ENABLE_PON | TCS34752_reg.TCS34725_ENABLE_AEN));\n}\n\n//% block=\"tcs34725 set integration time $value\"\nexport function tcs34725_set_integration_time(time: TCS34725IntegrationTime)\n{\n    /* Update the timing register */\n    setReg(TCS34752_reg.TCS34725_ATIME, time);\n    IntegrationTime = time;\n}\n\n//% block=\"tcs34725 set gain $value\"\nexport function tcs34725_set_gain(gain: TCS34725Gain)\n{\n    setReg(TCS34752_reg.TCS34725_CONTROL, gain);\n    Gain = gain;\n}\n\n\n//% block=\"tcs34725 get RGB data\"\nexport function tcs34725_get_rgb_data()\n{\n    let rgb = tcs34725RGB\n    let C = getWord(TCS34752_reg.TCS34725_CDATAL);\n    let R = getWord(TCS34752_reg.TCS34725_RDATAL);\n    let G = getWord(TCS34752_reg.TCS34725_GDATAL);\n    let B = getWord(TCS34752_reg.TCS34725_BDATAL);\n\n    if(C == 0) {\n        rgb.red = 0;\n        rgb.green = 0;\n        rgb.blue = 0;\n    }\n    else {\n        \n    }\n    return temp;\n}\n\n//% block=\"tcs34725 init\"\nexport function tcs34725_init()\n{\n    let ID = 0;\n    ID = getReg(TCS34752_reg.TCS34725_ID);\n    if (ID != 0x44 && ID != 0x4D) {\n        return 1;\n    }\n\n    //Set the integration time and gain\n    tcs34725_set_integration_time(TCS34725IntegrationTime.TCS34725_INTEGRATIONTIME_154MS);\n    tcs34725_set_gain(TCS34725Gain.TCS34725_GAIN_60X);\n    tcs34725_enable();\n    \n    return 0;\n}\n}\n","README.md":"","pxt.json":"{\n    \"name\": \"gdc-tcs34725\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.15\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1749300055144}